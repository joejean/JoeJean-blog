<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joe Jean</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/all.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2014-06-20T12:07:00+04:00</updated><entry><title>My method for finding the best books on any topic.</title><link href="http://localhost:8000/articles/my-method-for-finding-the-best-books-on-any-topic/" rel="alternate"></link><updated>2014-06-20T12:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-06-20:articles/my-method-for-finding-the-best-books-on-any-topic/</id><summary type="html">&lt;p&gt;I recently read an article about the importance of Computational Thinking. It is important because it helps you think about ways you can use computers 
to solve problems -- something that the knowledge of a programming language's syntax does not necessarily provide. So, I decided to read a good book about 
the subject. But first, I had to find the book. In what follows, I will explain how  I went about finding a great Computational Thinking book using Amazon and 
users' feedback. You will be able to apply those same techniques to find books on any other subjects that interest you.&lt;/p&gt;
&lt;p&gt;Since we are living in the era of internet and e-commerce, we can buy almost anything online. Moreover, people also give feedback about what they buy online. 
These feedbacks can be useful for future potential buyers. One of the most popular online retailers where people shop and write product reviews is Amazon. 
They sell different variety of products from books to groceries and garden items. So to find my book I head over to Amazon.com.&lt;br /&gt;
In the search bar, I change the department from "All" to "Books", type the name of the topic- in this case "Computational Thinking"-- and hit enter or 
click "Go". A result page will show.&lt;/p&gt;
&lt;p&gt;&lt;img src ="http://www.joejean.net/images/bestbook1.jpg" class="img-responsive" /&gt;&lt;/p&gt;
&lt;p&gt;Now that you have the search results from Amazon, all you need to do is go through the list and pick the books that both match your search query and have good 
reviews. Depending on the popularity of the subject matter, sometimes you will find books with a great number of reviews but at other times -like in this case - you will find books with just a few reviews or no reviews at all.
Normally, my choice of a book is based on the average number of positive reviews it has. Therefore, I would be less inclined to buy a book that does not have 
any reviews or that has an average review of less than 3 stars. But I have also discovered that it is important to actually read some of the reviews, especially 
the negative ones. What happens sometimes is that someone will write a negative review not because the content of the book was of poor quality but because the 
paper was or because the shipping took too long. Thus, I would not take into account such reviews in my buying decision. I'm more interested in the quality of 
the information provided in the book. &lt;/p&gt;
&lt;p&gt;So, in our case, what should I do? Well, this is going to be a tough call because unfortunately it seems like the literature on this particular subject is quite
limited. Amazon has provided of course many results but only a few are directly related to "Computational Thinking".  After scanning the search results, 
I realized that the best match is the first book called: "Computational Thinking for the Modern Problem Solver" by David Riley. &lt;img src ="http://www.joejean.net/images/bestbook2.jpg" class="img-responsive" /&gt; 
Sadly, this book has no reviews yet. That does not mean the book is not great but I just do not feel confident in buying it without seeing what others who have
bought it have to say about it. My next best alternative is the book titled "Computational Logic and Human Thinking" by Kowalski. &lt;img src ="http://www.joejean.net/images/bestbook3.jpg" class="img-responsive" /&gt; Although it is more about 
"Computational Logic" than "Computational Thinking", it has 3 positive reviews which provide me with more confidence in the quality of the materials presented. So, I bought this book. &lt;/p&gt;
&lt;p&gt;As you can see, in this particular case it was not easy for me to find a great book. However, this is due to the fact that there are not many books on this 
particular subject matter yet. But, I'm pretty sure that by using the simple techniques presented in this article you will have more luck finding some of the 
best books on a given subject matter that you want to study. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="books"></category><category term="reading"></category><category term="information"></category></entry><entry><title>5 Tips for writing more concise and elegant code in Python</title><link href="http://localhost:8000/articles/5-tips-for-writing-more-concise-elegant-python/" rel="alternate"></link><updated>2014-03-06T09:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-03-06:articles/5-tips-for-writing-more-concise-elegant-python/</id><summary type="html">&lt;p&gt;Last week, I was reviewing some of the first lines of code I wrote when I was learning python three years ago. While they worked, I now realise that
there are many things I could have done in a more elegant and concise way. Of course, when learning a new programming language one is always 
encouraged to build things from scratch, to write one's own functions, classes or methods to do things even when such code might already exists. 
&lt;/p&gt;
&lt;p&gt;This approach is definitely useful for a beginner. However, once one understands the basics, it is a good idea to start using code and techniques already 
provided --at least by the programming language itself. This will not only help you build things faster but also -- in most cases -- make your code more concise and readable. 
The following are five tips that you can start using today to make your python code more concise and elegant. &lt;/p&gt;
&lt;h3&gt;1) Prefer the return statement to evaluate your expression and return its result for you&lt;/h3&gt;
&lt;p&gt;Sometimes you have a function that returns the result of an expression. Let's say it's a boolean expression, so the return value can be either 
true or false. One usually uses a  variable to store the result of the expression and then return that variable, such as this:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    if (a % 2)==0:
        result = True
    else:
        result = False
    return result
&lt;/code&gt;&lt;/pre&gt;
However, a more elegant way to reach the same result is to put the entire expression in the return statement and it will compute and return the result of the
expression as follow:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    return (a % 2)==0
&lt;/code&gt;&lt;/pre&gt;
This is possible because the return statement actually returns the result of evaluating an expression. And in case you are wondering, in python numbers eveluate to themselves.&lt;/p&gt;
&lt;h3&gt;2) Prefer Python's builtin &lt;code&gt;format()&lt;/code&gt; function to format your strings&lt;/h3&gt;
&lt;p&gt;Imagine you have an object called "Player" which has attributes such has name and age. Now imagine that you have
a function called printPlayerInfo() that prints the player's information. One would usually uses the plus sign (+) to concatenate the string literals with
the string variables, such as this:
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player's name is "+Player.name+" and the player is "+str(Player.age)+" years old"
&lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;
However, a more elegant way to do this is to use python's builtin format() function. Thus our function becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player Name is {Player.name} and the player is {Player.age} years old".format(Player=Player)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, in addittion to making your code more readable, the format function spares the programmer the extra burden of casting all numbers to strings.   &lt;/p&gt;
&lt;h3&gt;3) Prefer a tuple instead of a temporary variable when swaping the values of two variables&lt;/h3&gt;
&lt;p&gt;When one wants to swap the values of two variables, they usually use a third variable as a temporary storage for one of the two values. Let's imagine that 
we want to swap the values of the variables &lt;code&gt;currentScore&lt;/code&gt; and &lt;code&gt;prevScore&lt;/code&gt;, one usually proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
temp = currentScore
currentScore = prevScore
prevScore = temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this can be done more elegantly using a python tuple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
(currentScore, prevScore) = (prevScore, currentScore)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4) Prefer list comprehension to create a new list out of an existing one&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list of numbers,&lt;code&gt;firstList&lt;/code&gt; and you want to create a second list,&lt;code&gt;secondList&lt;/code&gt;  with all the even numbers - we assume there are some- contained 
in &lt;code&gt;firstList&lt;/code&gt;. Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = []

for val in firstList:
    if val % 2 == 0:
        secondList.append(val)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a more elegant and pythonic way to do the same thing is to use list comprehension notation as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = [ val for val in list1 if val%2 == 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, some people might argue that the first method is more comprehensible than the second one. I would say that such a view is influenced by their knowledge of 
other programming languages. Furthermore, list comprehension is a python specific feature which is created to make code more beautiful and concise. &lt;/p&gt;
&lt;h3&gt;5) Prefer the list's &lt;code&gt;count()&lt;/code&gt; method to count the number of times an item appears on the list:&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list that has a couple of names for example. And, let's say you want to count the number of times a certain name appears on the list.
Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count =0
for name in nameList:
    if name == "aaa":
        count += 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, to achieve the same result you can simply use python's builtin list &lt;code&gt;count()&lt;/code&gt; method as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count = nameList.count("aaa")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The python list data type has more of those useful builtin methods that can not only make your life easier but aslo make your code more readable and concise. 
You can find them in the &lt;a href = "http://docs.python.org/2/tutorial/datastructures.html#more-on-lists" target="_blank"&gt; python documentation.&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry></feed>