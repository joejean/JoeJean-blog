<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joe Jean</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/all.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2014-10-21T17:40:00+04:00</updated><entry><title>Ideas for Second Project</title><link href="http://localhost:8000/articles/ideas-for-second-project/" rel="alternate"></link><updated>2014-10-21T17:40:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-10-21:articles/ideas-for-second-project/</id><summary type="html">&lt;p&gt;For my second project for this class, I have two ideas. I would like to implement one during this week
and work on the other when I have more free time. Okay, without further ado here they are.&lt;/p&gt;
&lt;p&gt;The first idea is to create an interactive map that represents the countries where the NYUAD student body
hails from. To implement this idea, I would need a dataset of all the countries represented in the student body.
And there are two ways I can get this data. One way is to ask someone from the office of Residential Education and the other way is to use the Facebook Graph API in order to retrieve the hometown of all the NYUAD students who are members of a student's secret group on Facebook. Then I would use &lt;a href="https://opendata.socrata.com/dataset/Country-List-ISO-3166-Codes-Latitude-Longitude/mnkm-8ram"&gt;this open API&lt;/a&gt; to get the geographical coordinates of each country. And finally, I would use &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; to build an interactive map visualization of the content.&lt;/p&gt;
&lt;p&gt;The second one is to use data from the World Bank in order to build a site that allows someone to compare two given countries. So, the user would enter two country names and I would request data for those countries from the World Bank API and display the data in the forms of graphs/visualizations. For example the user can easily see the number of students who go to school in a give country. Again, here I plain to use &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; to build the visualizations.&lt;/p&gt;
&lt;p&gt;Over the weekend, I will decide which one of those two ideas that I'm going to implement first.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>My Favorite Class Materials So Far</title><link href="http://localhost:8000/articles/my-favorite-class-materials-so-far/" rel="alternate"></link><updated>2014-10-19T23:00:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-10-19:articles/my-favorite-class-materials-so-far/</id><summary type="html">&lt;p&gt;I can't believe we are already in the middle of this great class, in fact one of my favorite so far.
Over the past weeks, we have used a lot of great tutorials/videos and articles as learning materials for the class.
All of them were really great. Below is a list of &lt;em&gt;some&lt;/em&gt; of my favorites in no particular order.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://infoactive.co/data-design/ch15"&gt;Importance of Color, Font, and Icons&lt;/a&gt;: This article provides great tips on how to use colors, font and icons when designing. My biggest takeaway is the human's mind takes longer to understand a text in Serif than it it takes to understand content displayed in Sans-Serif.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://alistapart.com/article/css-positioning-101"&gt;CSS Positioning 101&lt;/a&gt;: This article is just priceless. Thanks to it I was finally able to fully understand how to leverage the power of CSS's position property and its values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://eloquentjavascript.net"&gt;Eloquent JavaScript&lt;/a&gt;: This is one of the best JavaScript books I have read. I like to keep going back to it every time I need a refresher on some JavaScript topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;A re-introduction to JavaScript&lt;/a&gt;. This article by the Mozilla Developer Network is a great article that helped me understand some of the best JavaScript features in a clear and concise way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414005937&amp;amp;sr=1-1&amp;amp;keywords=Don%27t+Make+Me+Think"&gt;Don't Make Me Think, Revisited by Steve Krug&lt;/a&gt;: This is hands down the best book I have read on User Experience design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2014/05/29/mystery-jquery-object-syntax-basic-introduction/"&gt;The Mystery Of The jQuery Object: A Basic Introduction &lt;/a&gt;: Great introduction to the JQuery object, the famous $.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://learn.jquery.com/"&gt;JQuery Documentation&lt;/a&gt;: Great learning resource for JQuery.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, I could spend the entire day listing resources here. As I said, all of the resources we have used for the class are just awesome. In fact, if you are reading this and are not part of the class and you are eager to learn JavaScript web development, I strongly recommend you check out Professor Craig's repository for the class &lt;a href="https://github.com/craigprotzel/Mashups"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>First Project: San Francisco Graffiti Explorer</title><link href="http://localhost:8000/articles/first-project-san-francisco-graffiti-explorer/" rel="alternate"></link><updated>2014-10-01T16:01:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-10-01:articles/first-project-san-francisco-graffiti-explorer/</id><summary type="html">&lt;p&gt;For my first project for the Mashups class , I built a website --&lt;a href="http://joejean.github.io/SF_Graffiti/"&gt;available here&lt;/a&gt;-- that allows the user to explore graffiti spots in San Fransisco. In this article,
I'm going to provide some details on how I went about building the project.&lt;/p&gt;
&lt;p&gt;First of all, let me tell you some of the tools I used in this project. I used the
&lt;a href="https://data.sfgov.org/City-Infrastructure/Graffiti-30-Days/p6sg-7yp7"&gt;graffiti dataset from DataSF&lt;/a&gt;. This data set provides information--including geographic coordinates, status, and a photo when available-- about graffiti cases reported in the San Francisco area. I also used the &lt;a href="https://developers.google.com/maps/documentation/javascript/"&gt;Google Maps JavaScript API&lt;/a&gt;. And finally, I used &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for the UI.&lt;/p&gt;
&lt;p&gt;My intention was just to allow any graffiti lovers, no matter where they are in the world, to explore some of the graffiti spotted in the San Francisco area.&lt;/p&gt;
&lt;p&gt;Essentially, the site includes a Google map that occupies half of the page. On the
map, there are markers. Each one represents the location of a graffiti spot. If the graffiti hasn't been washed out--it has an "open" status in the dataset--it is represented on the map with a blue marker. A black marker represents a graffiti that has been cleaned.&lt;/p&gt;
&lt;p&gt;Since there are about a thousand graffiti in the dataset, when I load all of their respective markers on the map it looks pretty messy. Most markers would sit on top of one another. To fix this, I used a small library called &lt;a href="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/docs/reference.html"&gt;MarkerClusterer.js&lt;/a&gt; which groups together all of the markers that are really close to each other. Then when the user clicks on the cluster, it displays all the markers that it contains.&lt;/p&gt;
&lt;p&gt;When the user clicks on a given marker, two things happen: 1) the Google street view of the location of that graffiti is loaded on the left 2) on the specific marker is loaded an info window which list the name of the street, the status of the graffiti and if available a link to a picture of the graffiti.&lt;/p&gt;
&lt;p&gt;The process I followed while building the site was simple.It was my first time working with the Google Maps API so I had to learn it. After learning the API, I thought about how I wanted the UI to look. Then I built the UI using mostly the Bootstrap framework with a some customization as well. After getting the UI  right, I wrote the JavaScript code. I used the functional style in my JavaScript code.&lt;/p&gt;
&lt;p&gt;Currently, the site works and it looks fine, but I do think it needs some improvements. I plan to add a feature where the user can filter the types of graffiti they want to see--open, closed, with or without pictures available. I also would like to rewrite the JavaScript code using an object oriented programming style.&lt;/p&gt;
&lt;p&gt;I will hopefully publish the second version soon.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>How to set a default value for a function's parameter in Javascript &amp; first project idea</title><link href="http://localhost:8000/articles/how-to-set-default-value-for-function-parameter-in-javascript/" rel="alternate"></link><updated>2014-09-16T02:03:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-09-16:articles/how-to-set-default-value-for-function-parameter-in-javascript/</id><summary type="html">&lt;p&gt;This week  my homework has two parts. In the first part, I have to solve the three exercises found &lt;a href="http://eloquentjavascript.net/02_program_structure.html" target="_blank"&gt;at the end of chapter two&lt;/a&gt; in the book Eloquent Javascript. In the second part, I have to describe what I'm thinking about doing for my first single page app project, how the data flow might work, and what the experience of a user visiting the site would be like.&lt;/p&gt;
&lt;h3&gt;How to set a default value for function parameter in Javascript&lt;/h3&gt;
&lt;p&gt;The first exercise was to write a loop that makes seven calls to console.log to output the following triangle:&lt;/p&gt;
&lt;pre&gt;            #
            ##
            ###
            ####
            #####
            ######
            ####### &lt;/pre&gt;

&lt;p&gt;As my solution for this exercise, I decided to create a function&amp;mdash;&lt;code&gt;drawRightTriangle(height)&lt;/code&gt;&amp;mdash; that would take a parameter called &lt;code&gt;height&lt;/code&gt; which represents the height of the triangle. So, instead of seven calls to console.log, the program would make 3, 10, 12, etc. depending on the value provided by the user to the &lt;code&gt;height&lt;/code&gt; parameter. I also wanted to  give a default value to the parameter &lt;code&gt;height&lt;/code&gt; so that the user can alternatively call the function without passing any arguments, as in &lt;code&gt;drawRightTriangle()&lt;/code&gt;. Being a Python programmer, I quickly assumed
I could achieve this with a line as simple as &lt;code&gt;drawRightTriangle(height==8)&lt;/code&gt;, but it does not work like that in Javascript.
So, after a little bit of research, I found a &lt;a href="http://stackoverflow.com/questions/894860/set-a-default-parameter-value-for-a-javascript-function" target="_blank"&gt;Stackoverflow thread&lt;/a&gt; that shows how to do it using the "typeof" operator to test whether the paramter is &lt;code&gt;undefined&lt;/code&gt;. If it is, you assign it the default value, otherwise you just use it as it is, i.e , use the value provided by the user. The code is as follow: &lt;code&gt;height = typeof height !== 'undefined'? height: 7;&lt;/code&gt;. By the way, the &lt;code&gt;?&lt;/code&gt; is called the ternary operator&amp;mdash;&lt;code&gt;condition ? value_if_true : value_if_false&lt;/code&gt;. I could have achieved the same thing by using &lt;code&gt;if ... else&lt;/code&gt;. Here are the solutions for all three exercises:
&lt;pre&gt;
    &lt;code&gt;
      // Solutions to exercises from chapter 2 of Eloquent Javascript&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;//1- Looping a triangle&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;drawRightTriangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//I give height a default value in case the user does not provide any value.&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//2- FizzBuzz&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lowerLimit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;upperLimit&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lowerLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;upperLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: Buzz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//3 - Chess  Board&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chessBoard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;You can run and test these functions by opening &lt;a href="/files/mashups/hmw_2.html" target="_blank"&gt; this file &lt;/a&gt;. Then, from that page open your browser's developer console&amp;mdash;ctrl+shift+k in Firefox&amp;mdash; and start playing around with the functions.&lt;/p&gt;
&lt;h3&gt;First project idea&lt;/h3&gt;
&lt;p&gt;For my first single page app, I don't really know what I want to do yet. At this point, all I know for sure now is I want to make something cool. One not-so-cool idea I have so far is to use the NY Times API and a text to speech API in order to allow a robot to read the news to the user. Not-so-cool, right? I know. I promise to come up with somehting cool. Please stay tuned.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>Playing with an open API</title><link href="http://localhost:8000/articles/playing-with-an-open-api/" rel="alternate"></link><updated>2014-09-05T16:01:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-09-05:articles/playing-with-an-open-api/</id><summary type="html">&lt;p&gt;As part of my first homework for &lt;a href="https://github.com/craigprotzel/Mashups" target="_blank"&gt;Mashups: Creating with web API&lt;/a&gt;, I had to first find, post and describe an API that returns JSON data. &lt;/p&gt;
&lt;h3&gt;Initial Plan&lt;/h3&gt;
&lt;p&gt;After playing around with a couple of APIs, I decided to use the World Bank API. I like the fact that
one does not need a key to make requests to this API. And I also found the documentation
to be clear and useful.&lt;/p&gt;
&lt;p&gt;I use the following url &lt;code&gt;http://api.worldbank.org/incomeLevels/LIC/countries?format=json&lt;/code&gt;
in order to get a list of countries with income level classified as low income. As you can see four parameters are used
in the url. "incomeLevels" is used for information about all levels of income, "LIC" is an acronym that stands for
Low Level Income, and "countries" is the list of countries. By default, the World Bank API returns XML data. Since I wanted JSON, I had to explicitly specify that in the request url using &lt;code&gt;format=json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the second part of the assignment, I created a small script that sends a request to the API with the url mentioned above
and display the data on a nicely formatted HTML page.  Even though my script was syntaxically correct, and the request to the server was successful &amp;mdash; this is confirmed by the debugging info showed in my broswer's developer/Javascript console &amp;mdash;I still could not retrieve any data returned by the API.&lt;/p&gt;
&lt;p&gt;After doing some research about the issue, I found out that  the problem was due to an &lt;a href="http://stackoverflow.com/questions/22186703/modifying-jquery-jsonp-callback-function"&gt;implementation issue with the World Bank API.&lt;/a&gt;  If you want to learn more about the problem click the  previous link.&lt;/p&gt;
&lt;h3&gt;Second Plan&lt;/h3&gt;
&lt;p&gt;So since the World Bank API was not doing the job, I did some more research and found another open&amp;mdash;authentication free&amp;mdash; API: The US government jobs API.
I use the following url &lt;code&gt;http://api.usa.gov/jobs/search.json?query=tech+jobs&lt;/code&gt;to request all open technology related positions offered by government agencies. And I got the data back, manipulated it and displayed it on an HTML page. The page can be accessed &lt;a href="/files/mashups/hmw_1.html" target="_blank"&gt; here. &lt;/a&gt; And here is the JS code that does the job:
&lt;pre&gt;&lt;code&gt;
$(document).ready(function(){&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

                &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://api.usa.gov/jobs/search.json?query=tech+jobs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="c1"&gt;// Those are for debugging purpose&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position_title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;organization_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                  &lt;span class="c1"&gt;// The following code will add the JSON content returned by the API to the DOM&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;tr/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;td_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;td/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;td_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;td/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;aaa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;a/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_blank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;job_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position_title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;td_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;employer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;span/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;employer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;organization_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;td_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;span_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;span/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;td_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;

                 &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>How to run Python 2 and Python 3 together on Windows 7</title><link href="http://localhost:8000/articles/how-to-run-python-2-and-python-3-together-on-windows-7/" rel="alternate"></link><updated>2014-08-31T11:38:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-08-31:articles/how-to-run-python-2-and-python-3-together-on-windows-7/</id><summary type="html">&lt;p&gt;I have always wanted to have both Python 2 and Python 3 installed and running on my Windows 7 computer, but I feared that installation was going to be a nightmare. However, today I put my fear aside and dove right into the task.&lt;/p&gt;
&lt;p&gt;At least two scenarios are possible. While my experience was with the first scenario, the second one is also possible. So here is how to approach each one:&lt;/p&gt;
&lt;h3&gt;Scenario 1: Python 2, virtualenv and virtualenvwrapper are already installed&lt;/h3&gt;
&lt;p&gt;My Windows 7 laptop already had Python 2, virtualenv and virtualenvwrapper installed&amp;mdash;so, I downloaded and installed
&lt;a target="_blank" href="https://www.python.org/downloads/"&gt; Python 3 &lt;/a&gt;. By default, any virtual environment I create would use Python 2. In order to make them also use Python 3, I would create them with the following command: &lt;code&gt;mkvirtualenv myenv -p c:\python3.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But then, within that virtual environment, if I wanted to use Python 3, I would still have to call it explicitly using the command: &lt;code&gt;py -3&lt;/code&gt; otherwise it would still default to Python 2. I found this observation weird and  I decided to do a little experiment. I activated one of the virtual environments that were created without pointing to Python 3. Then, in the terminal I type: &lt;code&gt;py -3&lt;/code&gt; and, bam, it worked. Therefore, I came to the conclusion that installing Python 3 on my windows was enough for me to still use it in my virtual environments whenever I want to. I don't have to explicitly point my virtual environments to Python 3 with the &lt;code&gt;-p&lt;/code&gt; flag.&lt;/p&gt;
&lt;h3&gt;Scenario 2: Python is not installed&lt;/h3&gt;
&lt;p&gt;If Python is not already installed on your computer, you should install Python 3. And at the beginning of your Python files you would just add &lt;code&gt;#!python2&lt;/code&gt; or &lt;code&gt;#!python3&lt;/code&gt; depending on whether you want to use version 2 or version 3 of Python. Then, in order to run any of your Python programs, you would type: &lt;code&gt;py pythonfile.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, that I have both versions on my computer, I'm going to start exploring some of the interesting features of Python 3 while still keeping my Python code running.&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry><entry><title>My method for finding the best books on any topic.</title><link href="http://localhost:8000/articles/my-method-for-finding-the-best-books-on-any-topic/" rel="alternate"></link><updated>2014-06-20T12:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-06-20:articles/my-method-for-finding-the-best-books-on-any-topic/</id><summary type="html">&lt;p&gt;I recently read an article about the importance of Computational Thinking. It is important because it helps you think about ways you can use computers 
to solve problems -- something that the knowledge of a programming language's syntax does not necessarily provide. So, I decided to read a good book about 
the subject. But first, I had to find the book. In what follows, I will explain how  I went about finding a great Computational Thinking book using Amazon and 
users' feedback. You will be able to apply those same techniques to find books on any other subjects that interest you.&lt;/p&gt;
&lt;p&gt;Since we are living in the era of internet and e-commerce, we can buy almost anything online. Moreover, people also give feedback about what they buy online. 
These feedbacks can be useful for future potential buyers. One of the most popular online retailers where people shop and write product reviews is Amazon. 
They sell different variety of products from books to groceries and garden items. So to find my book I head over to Amazon.com.&lt;br /&gt;
In the search bar, I change the department from "All" to "Books", type the name of the topic- in this case "Computational Thinking"-- and hit enter or 
click "Go". A result page will show.&lt;/p&gt;
&lt;p&gt;&lt;img src ="http://www.joejean.net/images/bestbook1.JPG" class="img-responsive" /&gt;&lt;/p&gt;
&lt;p&gt;Now that you have the search results from Amazon, all you need to do is go through the list and pick the books that both match your search query and have good 
reviews. Depending on the popularity of the subject matter, sometimes you will find books with a great number of reviews but at other times -like in this case - you will find books with just a few reviews or no reviews at all.
Normally, my choice of a book is based on the average number of positive reviews it has. Therefore, I would be less inclined to buy a book that does not have 
any reviews or that has an average review of less than 3 stars. But I have also discovered that it is important to actually read some of the reviews, especially 
the negative ones. What happens sometimes is that someone will write a negative review not because the content of the book was of poor quality but because the 
paper was or because the shipping took too long. Thus, I would not take into account such reviews in my buying decision. I'm more interested in the quality of 
the information provided in the book. &lt;/p&gt;
&lt;p&gt;So, in our case, what should I do? Well, this is going to be a tough call because unfortunately it seems like the literature on this particular subject is quite
limited. Amazon has provided of course many results but only a few are directly related to "Computational Thinking".  After scanning the search results, 
I realized that the best match is the first book called: "Computational Thinking for the Modern Problem Solver" by David Riley. &lt;img src ="http://www.joejean.net/images/bestbook2.JPG" class="img-responsive" /&gt; 
Sadly, this book has no reviews yet. That does not mean the book is not great but I just do not feel confident in buying it without seeing what others who have
bought it have to say about it. My next best alternative is the book titled "Computational Logic and Human Thinking" by Kowalski. &lt;img src ="http://www.joejean.net/images/bestbook3.JPG" class="img-responsive" /&gt; Although it is more about 
"Computational Logic" than "Computational Thinking", it has 3 positive reviews which provide me with more confidence in the quality of the materials presented. So, I bought this book. &lt;/p&gt;
&lt;p&gt;As you can see, in this particular case it was not easy for me to find a great book. However, this is due to the fact that there are not many books on this 
particular subject matter yet. But, I'm pretty sure that by using the simple techniques presented in this article you will have more luck finding some of the 
best books on a given subject matter that you want to study. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="books"></category><category term="reading"></category><category term="information"></category></entry><entry><title>5 Tips for writing more concise and elegant code in Python</title><link href="http://localhost:8000/articles/5-tips-for-writing-more-concise-elegant-python/" rel="alternate"></link><updated>2014-03-06T09:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:localhost:8000,2014-03-06:articles/5-tips-for-writing-more-concise-elegant-python/</id><summary type="html">&lt;p&gt;Last week, I was reviewing some of the first lines of code I wrote when I was learning python three years ago. While they worked, I now realise that
there are many things I could have done in a more elegant and concise way. Of course, when learning a new programming language one is always 
encouraged to build things from scratch, to write one's own functions, classes or methods to do things even when such code might already exists. 
&lt;/p&gt;
&lt;p&gt;This approach is definitely useful for a beginner. However, once one understands the basics, it is a good idea to start using code and techniques already 
provided --at least by the programming language itself. This will not only help you build things faster but also -- in most cases -- make your code more concise and readable. 
The following are five tips that you can start using today to make your python code more concise and elegant. &lt;/p&gt;
&lt;h3&gt;1) Prefer the return statement to evaluate your expression and return its result for you&lt;/h3&gt;
&lt;p&gt;Sometimes you have a function that returns the result of an expression. Let's say it's a boolean expression, so the return value can be either 
true or false. One usually uses a  variable to store the result of the expression and then return that variable, such as this:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    if (a % 2)==0:
        result = True
    else:
        result = False
    return result
&lt;/code&gt;&lt;/pre&gt;
However, a more elegant way to reach the same result is to put the entire expression in the return statement and it will compute and return the result of the
expression as follow:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    return (a % 2)==0
&lt;/code&gt;&lt;/pre&gt;
This is possible because the return statement actually returns the result of evaluating an expression. And in case you are wondering, in python numbers eveluate to themselves.&lt;/p&gt;
&lt;h3&gt;2) Prefer Python's builtin &lt;code&gt;format()&lt;/code&gt; function to format your strings&lt;/h3&gt;
&lt;p&gt;Imagine you have an object called "Player" which has attributes such has name and age. Now imagine that you have
a function called printPlayerInfo() that prints the player's information. One would usually uses the plus sign (+) to concatenate the string literals with
the string variables, such as this:
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player's name is "+Player.name+" and the player is "+str(Player.age)+" years old"
&lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;
However, a more elegant way to do this is to use python's builtin format() function. Thus our function becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player Name is {Player.name} and the player is {Player.age} years old".format(Player=Player)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, in addittion to making your code more readable, the format function spares the programmer the extra burden of casting all numbers to strings.   &lt;/p&gt;
&lt;h3&gt;3) Prefer a tuple instead of a temporary variable when swaping the values of two variables&lt;/h3&gt;
&lt;p&gt;When one wants to swap the values of two variables, they usually use a third variable as a temporary storage for one of the two values. Let's imagine that 
we want to swap the values of the variables &lt;code&gt;currentScore&lt;/code&gt; and &lt;code&gt;prevScore&lt;/code&gt;, one usually proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
temp = currentScore
currentScore = prevScore
prevScore = temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this can be done more elegantly using a python tuple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
(currentScore, prevScore) = (prevScore, currentScore)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4) Prefer list comprehension to create a new list out of an existing one&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list of numbers,&lt;code&gt;firstList&lt;/code&gt; and you want to create a second list,&lt;code&gt;secondList&lt;/code&gt;  with all the even numbers - we assume there are some- contained 
in &lt;code&gt;firstList&lt;/code&gt;. Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = []

for val in firstList:
    if val % 2 == 0:
        secondList.append(val)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a more elegant and pythonic way to do the same thing is to use list comprehension notation as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = [ val for val in list1 if val%2 == 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, some people might argue that the first method is more comprehensible than the second one. I would say that such a view is influenced by their knowledge of 
other programming languages. Furthermore, list comprehension is a python specific feature which is created to make code more beautiful and concise. &lt;/p&gt;
&lt;h3&gt;5) Prefer the list's &lt;code&gt;count()&lt;/code&gt; method to count the number of times an item appears on the list:&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list that has a couple of names for example. And, let's say you want to count the number of times a certain name appears on the list.
Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count =0
for name in nameList:
    if name == "aaa":
        count += 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, to achieve the same result you can simply use python's builtin list &lt;code&gt;count()&lt;/code&gt; method as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count = nameList.count("aaa")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The python list data type has more of those useful builtin methods that can not only make your life easier but aslo make your code more readable and concise. 
You can find them in the &lt;a href = "http://docs.python.org/2/tutorial/datastructures.html#more-on-lists" target="_blank"&gt; python documentation.&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry></feed>